matrix_cuad ():
read x
read b
    a = [[0 for i from 0 to ((length (x) -1) * 3)] for j from 0 to ((length (x) -1) * 3)]
    a [0] [0] = x [0] raised to the 2
    a [0] [1] = x [0]
    a [0] [2] = 1
    a [1] [0] = x [1] to the power of 2
    a [1] [1] = x [1]
    a [1] [2] = 1

    j = 3
    for i from 2 to length (x):
        a [i] [j] = x [i] raised to the 2
        a [i] [j + 1] = x [i]
        a [i] [j + 2] = 1
        j + = 3

    i = 1
    j = 0
    for k of length (x) up to ((length (x) raised to the 2) -2)):
        b + = [0]
        a [k] [j] = x [i] raised to the 2
        a [k] [j + 1] = x [i]
        a [k] [j + 2] = 1
        a [k] [j + 3] = - (x [i] to the power of 2)
        a [k] [j + 4] = -x [i]
        a [k] [j + 5] = -1
        i + = 1
        j + = 3
        
    i = 1
    j = 0
    for k from (length (x) raised to the 2) -2) to length (a) -1):
        b + = [0]
        a [k] [j] = 2 * x [i]
        a [k] [j + 1] = 1
        a [k] [j + 2] = 0
        a [k] [j + 3] = -2 * x [i]
        a [k] [j + 4] = -1
        a [k] [j + 5] = 0
        i + = 1
        j + = 3
        
    b + = [0]
    a [len (a) -1] [0] = 2
    return a, b

 traces ():
    read x
    result = empty
    j = 0
    for i in from 0 to length (x):
        if j == 0:
            if x [i]> = 0.0:
                result + = x [i]) + "x ** 2"
            else:
                result + = x [i] + "x ** 2"
        elif j == 1:
            if x [i]> = 0.0:
                result + = "+" + x [i] + "x"
            else:
                result + = x [i] + "x"
        else:
            if x [i]> = 0.0:
                result + = "+" + x [i] + ""
            else:
                result + = x [i] + ""
            j = -1
        j + = 1
    write ("Traces:")
    for i in result.split (""):
        write (i)
